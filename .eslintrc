//.eslintrc for use with v0.23.0
// inspired by https://gist.github.com/cletusw/e01a85e399ab563b1236
// ESLint Meteor Configuration File
{
  // http://eslint.org/docs/rules/

  "ecmaFeatures": {
    "arrowFunctions": false,                   // enable arrow functions
    "binaryLiterals": false,                   // enable binary literals
    "blockBindings": false,                    // enable let and const (aka block bindings)
    "classes": false,                          // enable classes
    "defaultParams": false,                    // enable default function parameters
    "destructuring": false,                    // enable destructuring
    "forOf": false,                            // enable for-of loops
    "generators": false,                       // enable generators
    "modules": false,                          // enable modules and global strict mode
    "objectLiteralComputedProperties": false,  // enable computed object literal property names
    "objectLiteralDuplicateProperties": false, // enable duplicate object literal properties in strict mode
    "objectLiteralShorthandMethods": false,    // enable object literal shorthand methods
    "objectLiteralShorthandProperties": false, // enable object literal shorthand properties
    "octalLiterals": false,                    // enable octal literals
    "regexUFlag": false,                       // enable the regular expression u flag
    "regexYFlag": false,                       // enable the regular expression y flag
    "restParams": false,                       // enable the rest parameters
    "spread": false,                           // enable the spread operator
    "superInFunctions": false,                 // enable super references inside of functions
    "templateStrings": false,                  // enable template strings
    "unicodeCodePointEscapes": false,          // enable code point escapes
    "globalReturn": false,                     // allow return statements in the global scope
    "jsx": false                               // enable JSX
  },

  "parser": "babel-eslint",
  "env": {
    "browser": true,                           // browser global variables.
    "node": true,                              // Node.js global variables and Node.js-specific rules.
    "worker": false,                           // web workers global variables.
    "amd": false,                              // defines require() and define() as global variables as per the amd spec.
    "mocha": false,                            // adds all of the Mocha testing global variables.
    "jasmine": false,                          // adds all of the Jasmine testing global variables for version 1.3 and 2.0.
    "phantomjs": false,                        // phantomjs global variables.
    "jquery": false,                           // jquery global variables.
    "prototypejs": false,                      // prototypejs global variables.
    "shelljs": false,                          // shelljs global variables.
    "meteor": true,                            // meteor global variables.
    "mongo": false,                            // mongo global variables.
    "applescript": false,                      // applescript global variables.
    "es6": true                                // enable all ECMAScript 6 features except for modules.
  },

  "globals": {
    "meteor": true,
    "FlowRouter": false,
    "FlowLayout": false,
  },

  "plugins": [
    //  (must run `npm install eslint-plugin-*` as well )
  ],

  "rules": {
    /////////// Rules ///////////
    // Rules in ESLint are divided into several categories to help you better understand their value.
    // Additionally, not all rules are enabled by default.
    // Those that are not enabled by default are marked as being off.
    // use 0 for no action, 1 for warning, 2 for error

    /////////// Possible Errors ///////////
    // The following rules point out areas where you might have made mistakes.
    "comma-dangle": 0,              // disallow or enforce trailing commas
    "no-cond-assign": [2, "always"],            // disallow assignment in conditional expressions
    "no-console": 1,                // disallow use of console (off by default in the node environment)
    "no-constant-condition": 2,     // disallow use of constant expressions in conditions
    "no-control-regex": 2,          // disallow control characters in regular expressions
    "no-debugger": 2,               // disallow use of debugger
    "no-dupe-args": 2,              // disallow duplicate arguments in functions
    "no-dupe-keys": 2,              // disallow duplicate keys when creating object literals
    "no-duplicate-case": 2,         // disallow a duplicate case label.
    "no-empty-character-class": 2,  // disallow the use of empty character classes in regular expressions
    "no-empty": 2,                  // disallow empty statements
    "no-ex-assign": 2,              // disallow assigning to the exception in a catch block
    "no-extra-boolean-cast": 2,     // disallow double-negation boolean casts in a boolean context
    "no-extra-parens": [2, "all"],           // disallow unnecessary parentheses (off by default)
    "no-extra-semi": 2,             // disallow unnecessary semicolons
    "no-func-assign": 2,            // disallow overwriting functions written as function declarations
    "no-inner-declarations": [2, "both"],     // disallow function or variable declarations in nested blocks
    "no-invalid-regexp": 2,         // disallow invalid regular expression strings in the RegExp constructor
    "no-irregular-whitespace": 2,   // disallow irregular whitespace outside of strings and comments
    "no-negated-in-lhs": 2,         // disallow negation of the left operand of an in expression
    "no-obj-calls": 2,              // disallow the use of object properties of the global object (Math and JSON) as functions
    "no-regex-spaces": 2,           // disallow multiple spaces in a regular expression literal
    "no-reserved-keys": 0,          // disallow reserved words being used as object literal keys (off by default)
    "no-sparse-arrays": 2,          // disallow sparse arrays
    "no-unreachable": 2,            // disallow unreachable statements after a return, throw, continue, or break statement
    "no-unexpected-multiline": 2,   // Avoid code that looks like two expressions but is actually one (off by default)
    "use-isnan": 2,                 // disallow comparisons with the value NaN
    "valid-jsdoc": 0,               // Ensure JSDoc comments are valid (off by default)
    "valid-typeof": 2,              // Ensure that the results of typeof are compared against a valid string

    /////////// Best Practices ///////////
    // These are rules designed to prevent you from making mistakes. They either prescribe a better way of doing something or help you avoid footguns.
    "accessor-pairs": 0,          // Enforces getter/setter pairs in objects (off by default)
    "block-scoped-var": 1,        // treat var statements as if they were block scoped (off by default)
    "complexity": [1, 2],              // specify the maximum cyclomatic complexity allowed in a program (off by default)
    "consistent-return": 1,       // require return statements to either always or never specify values
    "curly": [
      2,
      "multi-line"
    ],                            // specify curly brace conventions for all control statements
    "default-case": 2,            // require default case in switch statements (off by default)
    "dot-notation": 1,            // encourages use of dot notation whenever possible
    "dot-location": [1, "property"],            // enforces consistent newlines before or after dots (off by default)
    "eqeqeq": [2, "smart"],                  // require the use of === and !==
    "guard-for-in": 1,            // make sure for-in loops have an if statement (off by default)
    "no-alert": 2,                // disallow the use of alert, confirm, and prompt
    "no-caller": 2,               // disallow use of arguments.caller or arguments.callee
    "no-div-regex": 2,            // disallow division operators explicitly at beginning of regular expression (off by default)
    "no-else-return": 1,          // disallow else after a return in an if (off by default)
    "no-empty-label": 2,          // disallow use of labels for anything other than loops and switches
    "no-eq-null": 2,              // disallow comparisons to null without a type-checking operator (off by default)
    "no-eval": 2,                 // disallow use of eval()
    "no-extend-native": 2,        // disallow adding to native types
    "no-extra-bind": 2,           // disallow unnecessary function binding
    "no-fallthrough": 2,          // disallow fallthrough of case statements
    "no-floating-decimal": 2,     // disallow the use of leading or trailing decimal points in numeric literals (off by default)
    "no-implied-eval": 2,         // disallow use of eval()-like methods
    "no-iterator": 2,             // disallow usage of __iterator__ property
    "no-labels": 2,               // disallow use of labeled statements
    "no-lone-blocks": 2,          // disallow unnecessary nested blocks
    "no-loop-func": 2,            // disallow creation of functions within loops
    "no-multi-spaces": 1,         // disallow use of multiple spaces
    "no-multi-str": 2,            // disallow use of multiline strings
    "no-native-reassign": 2,      // disallow reassignments of native objects
    "no-new-func": 2,             // disallow use of new operator for Function object
    "no-new-wrappers": 2,         // disallows creating new instances of String,Number, and Boolean
    "no-new": 2,                  // disallow use of new operator when not part of the assignment or comparison
    "no-octal-escape": 2,         // disallow use of octal escape sequences in string literals, such as var foo = "Copyright \251";
    "no-octal": 2,                // disallow use of octal literals
    "no-param-reassign": 2,       // disallow reassignment of function parameters (off by default)
    "no-process-env": 2,          // disallow use of process.env (off by default)
    "no-proto": 2,                // disallow usage of __proto__ property
    "no-redeclare": 2,            // disallow declaring the same variable more than once
    "no-return-assign": 2,        // disallow use of assignment in return statement
    "no-script-url": 2,           // disallow use of javascript: urls.
    "no-self-compare": 2,         // disallow comparisons where both sides are exactly the same (off by default)
    "no-sequences": 2,            // disallow use of comma operator
    "no-throw-literal": 2,        // restrict what can be thrown as an exception (off by default)
    "no-unused-expressions": 1,   // disallow usage of expressions in statement position
    "no-void": 2,                 // disallow use of void operator (off by default)
    "no-warning-comments": [1, { "terms": ["todo", "fixme", "fix"], "location": "anywhere" }],     // disallow usage of configurable warning terms in comments e.g. TODO or FIXME (off by default)
    "no-with": 1,                 // disallow use of the with statement
    "radix": 2,                   // require use of the second argument for parseInt() (off by default)
    "vars-on-top": 2,             // requires to declare all vars on top of their containing scope (off by default)
    "wrap-iife": 0,               // require immediate function invocation to be wrapped in parentheses (off by default)
    "yoda": [1, "never"],                    // require or disallow Yoda conditions

    /////////// Strict Mode ///////////
    // These rules relate to using strict mode.
    "strict": 0,                  // controls location of Use Strict Directives

    /////////// Variables ///////////
    // These rules have to do with variable declarations.
    "no-catch-shadow": 0,             // disallow the catch clause parameter name being the same as a variable in the outer scope (off by default in the node environment)
    "no-delete-var": 2,               // disallow deletion of variables
    "no-label-var": 1,                // disallow labels that share a name with a variable
    "no-shadow-restricted-names": 2,  // disallow shadowing of names such as arguments
    "no-shadow": 2,                   // disallow declaration of variables already declared in the outer scope
    "no-undef-init": 2,               // disallow use of undefined when initializing variables
    "no-undef": 1,                    // disallow use of undeclared variables unless mentioned in a /*global */ block
    "no-undefined": 2,                // disallow use of undefined variable (off by default)
    "no-unused-vars": 1,              // disallow declaration of variables that are not used in the code
    "no-use-before-define": [1, "nofunc"],        // disallow use of variables before they are defined

    /////////// Node.js ///////////
    // These rules are specific to JavaScript running on Node.js.
    "handle-callback-err": 0,     // enforces error handling in callbacks (off by default) (on by default in the node environment)
    "no-mixed-requires": 0,       // disallow mixing regular variable and require declarations (off by default) (on by default in the node environment)
    "no-new-require": 0,          // disallow use of new operator with the require function (off by default) (on by default in the node environment)
    "no-path-concat": 0,          // disallow string concatenation with __dirname and __filename (off by default) (on by default in the node environment)
    "no-process-exit": 0,         // disallow process.exit() (on by default in the node environment)
    "no-restricted-modules": 0,   // restrict usage of specified node modules (off by default)
    "no-sync": 0,                 // disallow use of synchronous methods (off by default)

    /////////// Stylistic Issues ///////////
    // These rules are purely matters of style and are quite subjective.
    "array-bracket-spacing": [2, "never"],    // enforce spacing inside array brackets (off by default)
    "brace-style": [2, "1tbs", { "allowSingleLine": false }],                // enforce one true brace style (off by default)
    "camelcase": [2, {"properties": "always"}],                  // require camel case names
    "comma-spacing": [
      2, {
        "before": false,
        "after": true
      }
    ],                               // enforce spacing before and after comma
    "comma-style": [2, "last"],                // enforce one true comma style (off by default)
    "computed-property-spacing": [2, "never"],  // require or disallow padding inside computed properties (off by default)
    "consistent-this": [2, "self"],            // enforces consistent naming when capturing the current execution context (off by default)
    "eol-last": 1,                   // enforce newline at the end of file, with no multiple empty lines
    "func-names": 0,                 // require function expressions to have a name (off by default)
    "func-style": [2, "expression"],                 // enforces use of function declarations or expressions (off by default)
    "indent": [
      2,
      2
    ],                               // this option sets a specific tab width for your code (off by default)
    "key-spacing": [
      0, {
        "align": "value",
        "beforeColon": false,
        "afterColon": true
      }
    ],                // enforces spacing between keys and values in object literal properties
    "lines-around-comment": 0,       // enforces empty lines around comments (off by default)
    "linebreak-style": [2, "unix"],            // disallow mixed LF and CRLF as linebreaks (off by default)
    "max-nested-callbacks": [2, 3],       // specify the maximum depth callbacks can be nested (off by default)
    "new-cap": [2, {"newIsCap": true, "capIsNew": true}],                    // require a capital letter for constructors
    "new-parens": 2,                 // disallow the omission of parentheses when invoking a constructor with no arguments
    "newline-after-var": [1, "always"],          // allow/disallow an empty newline after var statement (off by default)
    "no-array-constructor": 2,       // disallow use of the Array constructor
    "no-continue": 2,                // disallow use of the continue statement (off by default)
    "no-inline-comments": 0,         // disallow comments inline after code (off by default)
    "no-lonely-if": 2,               // disallow if as the only statement in an else block (off by default)
    "no-mixed-spaces-and-tabs": 2,   // disallow mixed spaces and tabs for indentation
    "no-multiple-empty-lines": 0,    // disallow multiple empty lines (off by default)
    "no-nested-ternary": 2,          // disallow nested ternary expressions (off by default)
    "no-new-object": 2,              // disallow use of the Object constructor
    "no-spaced-func": 2,             // disallow space between function identifier and application
    "no-ternary": 0,                 // disallow the use of ternary operators (off by default)
    "no-trailing-spaces": 2,         // disallow trailing whitespace at the end of lines
    "no-underscore-dangle": 2,       // disallow dangling underscores in identifiers
    "no-unneeded-ternary": 2,        // disallow the use of Boolean literals in conditional expressions (off by default)
    "object-curly-spacing": [2, "never"],       // require or disallow padding inside curly braces (off by default)
    "one-var": [2, "never"],                    // allow or disallow one variable declaration per function (off by default)
    "operator-assignment": [2, "always"],        // require assignment operator shorthand where possible or prohibit it entirely (off by default)
    "operator-linebreak": [2, "before"],         // enforce operators to be placed before or after line breaks (off by default)
    "padded-blocks": [1, "always"],              // enforce padding within blocks (off by default)
    "quote-props": [1, "as-needed"],                // require quotes around object literal property names (off by default)
    "quotes": [
      1,
      "single",
      "avoid-escape"
    ],                               // specify whether backticks, double or single quotes should be used
    "semi-spacing": [
      2,
      {"before": false, "after": true}
    ],                               // enforce spacing before and after semicolons
    "semi": [
      2,
      "always"
    ],                               // require or disallow use of semicolons instead of ASI
    "sort-vars": 0,                  // sort variables within the same declaration block (off by default)
    "space-after-keywords": [
      2,
      "always"
    ],                               // require a space after certain keywords (off by default)
    "space-before-blocks": [2, "always"],        // require or disallow space before blocks (off by default)
    "space-before-function-paren": [
      2,
      "never"
    ],                               // require or disallow space before function opening parenthesis (off by default)
    "space-in-parens": [
      2,
      "never"
    ],                               // require or disallow spaces inside parentheses (off by default)
    "space-infix-ops": 2,            // require spaces around operators
    "space-return-throw-case": 2,    // require a space after return, throw, and case
    "space-unary-ops": 2,            // Require or disallow spaces before/after unary operators (words on by default, nonwords off by default)
    "spaced-comment": [1, "always", {"exceptions":["-","+"]}],             // require or disallow a space immediately following the // or /* in a comment (off by default)
    "wrap-regex": 2,                 // require regex literals to be wrapped in parentheses (off by default)

    /////////// ECMAScript 6 ///////////
    // These rules are only relevant to ES6 environments and are off by default.
    "constructor-super": 2,          // verify super() callings in constructors (off by default)
    "generator-star-spacing": [2, {"before": false, "after": true}],     // enforce the spacing around the * in generator functions (off by default)
    "no-this-before-super": 2,       // disallow to use this/super before super() calling in constructors. (off by default)
    "no-var": 2,                     // require let or const instead of var (off by default)
    "object-shorthand": [2, "always"],           // require method and property shorthand syntax for object literals (off by default)
    "prefer-const": 1,               // suggest using of const declaration for variables that are never modified after declared (off by default)

    /////////// Legacy ///////////
    // The following rules are included for compatibility with JSHint and JSLint. While the names of the rules may not match up with the JSHint/JSLint counterpart, the functionality is the same.
    "max-depth": 0,                  // specify the maximum depth that blocks can be nested (off by default)
    "max-len": [
      1,
      80,
      2
    ], // specify the maximum length of a line in your program (off by default)
    "max-params": 0,                 // limits the number of parameters that can be used in the function declaration. (off by default)
    "max-statements": 0,             // specify the maximum number of statement allowed in a function (off by default)
    "no-bitwise": 0,                 // disallow use of bitwise operators (off by default)
    "no-plusplus": 0                 // disallow use of unary operators, ++ and -- (off by default)
  }
}
